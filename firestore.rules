rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    match /users/{userId} {
      // Allow read/list if logged in
      allow get, list: if request.auth != null;
      // Allow create if user is creating their own doc
      allow create: if request.auth != null && request.auth.uid == userId;
      // Allow update/delete if user owns the doc
      allow update, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    match /chats/{chatId} {
      // Check if the authenticated user is part of this chat (or potential chat)
      function isUserInChat() {
        return request.auth.uid in resource.data.participantIds || 
               chatId.matches(request.auth.uid + "_.*") || 
               chatId.matches(".*_" + request.auth.uid);
      }
      
      // Allow get if user is a participant or chat ID contains the user's ID
      allow get: if request.auth != null && isUserInChat();
                   
      // List operation should still check the participantIds
      allow list: if request.auth != null && request.auth.uid in resource.data.participantIds;

      // Allow create for DIRECT chats - simplified to match your implementation
      allow create: if request.auth != null 
                     && request.auth.uid in request.resource.data.participantIds
                     && request.resource.data.participantIds.size() == 2;

      // Allow create for GROUP chats
      allow create: if request.auth != null
                     && request.auth.uid in request.resource.data.participantIds
                     && request.resource.data.participantIds.size() >= 2
                     && request.resource.data.isGroup == true
                     && request.resource.data.createdBy == request.auth.uid;

      // Allow update if user is a participant
      allow update: if request.auth != null && request.auth.uid in resource.data.participantIds;
      
      // Disallow direct deletion of chats
      allow delete: if false;

      match /messages/{messageId} {
        // Allow read if user is a participant of the parent chat
        allow read: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
        
        // Allow create if user is a participant and senderId matches auth uid
        allow create: if request.auth != null 
                      && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds
                      && request.resource.data.senderId == request.auth.uid;
                      
        // Allow update/delete only if user is the sender
        allow update, delete: if request.auth != null && resource.data.senderId == request.auth.uid;
      }
    }

    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
