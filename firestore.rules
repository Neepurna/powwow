rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // User document rules
    match /users/{userId} {
      // Allow anyone authenticated to read any user profile (needed for search/display names)
      allow get: if request.auth != null;
      // Allow users to create their own profile document
      allow create: if request.auth != null && request.auth.uid == userId;
      // Allow users to update only their own profile document
      allow update, delete: if request.auth != null && request.auth.uid == userId;
      // Allow authenticated users to list/query users (needed for search)
      allow list: if request.auth != null; 
    }
    
    // Rules for chat collection
    match /chats/{chatId} {
      // Allow read (get, list) if the requesting user's ID is in the participantIds array
      allow read: if request.auth != null && request.auth.uid in resource.data.participantIds;
      
      // Allow create if the requesting user's ID is included in the participantIds of the *new* document
      // and the participantIds array contains exactly two IDs.
      allow create: if request.auth != null 
                     && request.auth.uid in request.resource.data.participantIds
                     && request.resource.data.participantIds.size() == 2;
                     
      // Allow update (e.g., lastMessage) if the user is a participant
      allow update: if request.auth != null && request.auth.uid in resource.data.participantIds;
      
      // Disallow delete for now, or add specific logic if needed
      allow delete: if false;

      // Rules for nested messages collection (if you add messages later)
      match /messages/{messageId} {
        // Allow read if user is a participant of the parent chat
        allow read: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
        // Allow create if user is a participant and the senderId matches the user
        allow create: if request.auth != null 
                      && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds
                      && request.resource.data.senderId == request.auth.uid;
        // Allow update/delete only by the sender
        allow update, delete: if request.auth != null && resource.data.senderId == request.auth.uid;
      }
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
