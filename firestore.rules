rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    match /users/{userId} {
      allow get: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update, delete: if request.auth != null && request.auth.uid == userId;
      allow list: if request.auth != null; 
    }
    
    match /chats/{chatId} {
      // Allow get if resource doesn't exist OR if user is a participant
      allow get: if request.auth != null && (!exists(/databases/$(database)/documents/chats/$(chatId)) || request.auth.uid in resource.data.participantIds);
      // Keep the simplified list rule for now
      allow list: if request.auth != null; 

      allow create: if request.auth != null 
                     && request.auth.uid in request.resource.data.participantIds
                     && request.resource.data.participantIds.size() == 2;
                     
      allow update: if request.auth != null && request.auth.uid in resource.data.participantIds;
      
      allow delete: if false;

      match /messages/{messageId} {
        allow read: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
        allow create: if request.auth != null 
                      && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds
                      && request.resource.data.senderId == request.auth.uid;
        allow update, delete: if request.auth != null && resource.data.senderId == request.auth.uid;
      }
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
